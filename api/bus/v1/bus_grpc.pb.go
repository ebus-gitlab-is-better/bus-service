// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: api/bus/v1/bus.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Bus_CreateBus_FullMethodName = "/api.bus.v1.Bus/CreateBus"
	Bus_UpdateBus_FullMethodName = "/api.bus.v1.Bus/UpdateBus"
	Bus_DeleteBus_FullMethodName = "/api.bus.v1.Bus/DeleteBus"
	Bus_GetBus_FullMethodName    = "/api.bus.v1.Bus/GetBus"
	Bus_ListBus_FullMethodName   = "/api.bus.v1.Bus/ListBus"
)

// BusClient is the client API for Bus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BusClient interface {
	CreateBus(ctx context.Context, in *CreateBusRequest, opts ...grpc.CallOption) (*CreateBusReply, error)
	UpdateBus(ctx context.Context, in *UpdateBusRequest, opts ...grpc.CallOption) (*UpdateBusReply, error)
	DeleteBus(ctx context.Context, in *DeleteBusRequest, opts ...grpc.CallOption) (*DeleteBusReply, error)
	GetBus(ctx context.Context, in *GetBusRequest, opts ...grpc.CallOption) (*GetBusReply, error)
	ListBus(ctx context.Context, in *ListBusRequest, opts ...grpc.CallOption) (*ListBusReply, error)
}

type busClient struct {
	cc grpc.ClientConnInterface
}

func NewBusClient(cc grpc.ClientConnInterface) BusClient {
	return &busClient{cc}
}

func (c *busClient) CreateBus(ctx context.Context, in *CreateBusRequest, opts ...grpc.CallOption) (*CreateBusReply, error) {
	out := new(CreateBusReply)
	err := c.cc.Invoke(ctx, Bus_CreateBus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *busClient) UpdateBus(ctx context.Context, in *UpdateBusRequest, opts ...grpc.CallOption) (*UpdateBusReply, error) {
	out := new(UpdateBusReply)
	err := c.cc.Invoke(ctx, Bus_UpdateBus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *busClient) DeleteBus(ctx context.Context, in *DeleteBusRequest, opts ...grpc.CallOption) (*DeleteBusReply, error) {
	out := new(DeleteBusReply)
	err := c.cc.Invoke(ctx, Bus_DeleteBus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *busClient) GetBus(ctx context.Context, in *GetBusRequest, opts ...grpc.CallOption) (*GetBusReply, error) {
	out := new(GetBusReply)
	err := c.cc.Invoke(ctx, Bus_GetBus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *busClient) ListBus(ctx context.Context, in *ListBusRequest, opts ...grpc.CallOption) (*ListBusReply, error) {
	out := new(ListBusReply)
	err := c.cc.Invoke(ctx, Bus_ListBus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BusServer is the server API for Bus service.
// All implementations must embed UnimplementedBusServer
// for forward compatibility
type BusServer interface {
	CreateBus(context.Context, *CreateBusRequest) (*CreateBusReply, error)
	UpdateBus(context.Context, *UpdateBusRequest) (*UpdateBusReply, error)
	DeleteBus(context.Context, *DeleteBusRequest) (*DeleteBusReply, error)
	GetBus(context.Context, *GetBusRequest) (*GetBusReply, error)
	ListBus(context.Context, *ListBusRequest) (*ListBusReply, error)
	mustEmbedUnimplementedBusServer()
}

// UnimplementedBusServer must be embedded to have forward compatible implementations.
type UnimplementedBusServer struct {
}

func (UnimplementedBusServer) CreateBus(context.Context, *CreateBusRequest) (*CreateBusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBus not implemented")
}
func (UnimplementedBusServer) UpdateBus(context.Context, *UpdateBusRequest) (*UpdateBusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBus not implemented")
}
func (UnimplementedBusServer) DeleteBus(context.Context, *DeleteBusRequest) (*DeleteBusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBus not implemented")
}
func (UnimplementedBusServer) GetBus(context.Context, *GetBusRequest) (*GetBusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBus not implemented")
}
func (UnimplementedBusServer) ListBus(context.Context, *ListBusRequest) (*ListBusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBus not implemented")
}
func (UnimplementedBusServer) mustEmbedUnimplementedBusServer() {}

// UnsafeBusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BusServer will
// result in compilation errors.
type UnsafeBusServer interface {
	mustEmbedUnimplementedBusServer()
}

func RegisterBusServer(s grpc.ServiceRegistrar, srv BusServer) {
	s.RegisterService(&Bus_ServiceDesc, srv)
}

func _Bus_CreateBus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusServer).CreateBus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bus_CreateBus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusServer).CreateBus(ctx, req.(*CreateBusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bus_UpdateBus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusServer).UpdateBus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bus_UpdateBus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusServer).UpdateBus(ctx, req.(*UpdateBusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bus_DeleteBus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusServer).DeleteBus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bus_DeleteBus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusServer).DeleteBus(ctx, req.(*DeleteBusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bus_GetBus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusServer).GetBus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bus_GetBus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusServer).GetBus(ctx, req.(*GetBusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bus_ListBus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusServer).ListBus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bus_ListBus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusServer).ListBus(ctx, req.(*ListBusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Bus_ServiceDesc is the grpc.ServiceDesc for Bus service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bus_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.bus.v1.Bus",
	HandlerType: (*BusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBus",
			Handler:    _Bus_CreateBus_Handler,
		},
		{
			MethodName: "UpdateBus",
			Handler:    _Bus_UpdateBus_Handler,
		},
		{
			MethodName: "DeleteBus",
			Handler:    _Bus_DeleteBus_Handler,
		},
		{
			MethodName: "GetBus",
			Handler:    _Bus_GetBus_Handler,
		},
		{
			MethodName: "ListBus",
			Handler:    _Bus_ListBus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/bus/v1/bus.proto",
}
