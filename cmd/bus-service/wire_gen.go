// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"bus-service/internal/biz"
	"bus-service/internal/conf"
	"bus-service/internal/data"
	"bus-service/internal/route"
	"bus-service/internal/server"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	grpcServer := server.NewGRPCServer(confServer, logger)
	db := data.NewDB(confData)
	goCloak := data.NewKeycloak(confData)
	keycloakAPI := data.NewKeyCloakAPI(confData, goCloak, logger)
	dataData, cleanup, err := data.NewData(confData, logger, db, keycloakAPI)
	if err != nil {
		return nil, nil, err
	}
	busRepo := data.NewBusRepo(dataData, logger)
	busUseCase := biz.NewBusUseCase(busRepo, logger)
	shiftRepo := data.NewShiftRepo(dataData)
	shiftUseCase := biz.NewShiftUseCase(shiftRepo)
	busRouter := route.NewBusRouter(busUseCase, shiftUseCase)
	routeRepo := data.NewRouterRepo(dataData, logger)
	mapClient := data.NewMapService(confData)
	rabbitData := data.NewRabbit(confData)
	routeUseCase := biz.NewRouteUseCase(routeRepo, logger, mapClient, rabbitData)
	routeRouter := route.NewRouteRouter(routeUseCase, mapClient)
	driverRepo := data.NewDriverRepo(dataData)
	driverUseCase := biz.NewDriverUseCase(driverRepo)
	driverRoute := route.NewDriverRoute(driverUseCase)
	httpServer := server.NewHTTPServer(confServer, busRouter, keycloakAPI, routeRouter, driverRoute, logger)
	rabbitConn := server.NewRabbitConn(rabbitData, routeUseCase)
	customHTTP := server.NewCustomHttp(confServer, busRouter, keycloakAPI, routeRouter, driverRoute, logger)
	app := newApp(logger, grpcServer, httpServer, rabbitConn, customHTTP)
	return app, func() {
		cleanup()
	}, nil
}
